1. 
def multiply_2_pure(numbers):
    new_numbers = []
    for n in numbers:
        new_numbers.append(n * 2)
    return new_numbers

original_numbers = [1, 3, 5, 10]
changed_numbers = multiply_2_pure(original_numbers)
print(original_numbers) # [1, 3, 5, 10]
print(changed_numbers)  # [2, 6, 10, 20]

(base) E:\python>python latihan.py
[1, 3, 5, 10]
[2, 6, 10, 20]

penjelasan : didalam new  append terdapat variabel (n * 2)
lalu jika kita ganti 3 angkanya maka hasilnya
(base) E:\python>python latihan.py
[1, 3, 5, 10]
[3, 9, 15, 30]
yang artinya dikali angka 2 dan dikali atribut original yang didalamnya
terdapat variabel maka hasilnya seperti yang pertama

2.
mutable_collection = ['Tim', 10, [4, 5]]
immutable_collection = ('Tim', 10, [4, 5])

# Reading from data types are essentially the same:
print(mutable_collection[2])    # [4, 5]
print(immutable_collection[2])  # [4, 5]

# Let's change the 2nd value from 10 to 15
mutable_collection[1] = 15

# This fails with the tuple
immutable_collection[1] = 15

Traceback (most recent call last):
  File "latihan2.py", line 12, in <module>
    immutable_collection[1] = 15
TypeError: 'tuple' object does not support item assignment

Penjelasan : error karena terdapat atribut 'immutable_collection[1] = 15'
yang membuat tuple objek tidak mendukung

3. 
def write_repeat(message, n):
    for i in range(n):
        print(message)

write_repeat('Hello', 5)

(base) E:\python>python latihan.py
Hello
Hello
Hello
Hello
Hello

perulangan for didalam nya terdapat objek message 5 dan n yang berarti 
didalam atribut write_repeat ('Hello', 5) jika di run Hello ada 5 Hello

4. 
def hof_write_repeat(message, n, action):
    for i in range(n):
        action(message)

hof_write_repeat('Hello', 5, print)

# Import the logging library
import logging
# Log the output as an error instead
hof_write_repeat('Hello', 5, logging.error)

error
(base) E:\python>python latihan.py
  File "latihan.py", line 5
    hof_write_repeat('Hello', 5, print)
Penjelasan : error karena library logging diberikan variabel logging.error

5.
def add2(numbers):
    new_numbers = []
    for n in numbers:
        new_numbers.append(n + 2)
    return new_numbers

print(add2([23, 88])) # [25, 90]

(base) E:\python>python latihan.py
[25, 90]
Penjelasan : output tersebut dikarenakan penambahan dari parameter 
new_numbers.append(n + 2) yang berarti yang akan dikeluarkan output
seperti diatas jika diganti n + 0 maka hasilnya 23 , 88

6.
def hof_add(increment):
    # Create a function that loops and adds the increment
    def add_increment(numbers):
        new_numbers = []
        for n in numbers:
            new_numbers.append(n + increment)
        return new_numbers
    # We return the function as we do any other value
    return add_increment

add5 = hof_add(5)
print(add5([23, 88]))   # [28, 93]
add10 = hof_add(10)
print(add10([23, 88]))  # [33, 98]

Penjelasan : output tersebut dikarenakan didalam atribut terdapat
variabel ( n + increment) yang berarti didalam hod add ada nilai (5) dan (10)
di print tersebut trdapat angka maka angka setiap objek add ditambahkan 5 
dan yang satu objek add10 ditambah 10.

7.
def hof_product(multiplier):
    return lambda x: x * multiplier

mult6 = hof_product(6)
print(mult6(6)) # 36

(base) E:\python>python latihan.py
36
penjelasan karena nilai x dikali atribut mult6 = yang terdapat objek hof product(6)

8.
names = ['Shivani', 'Jason', 'Yusef', 'Sakura']
greeted_names = map(lambda x: 'Hi ' + x, names)

# This prints something similar to: <map object at 0x10ed93cc0>
print(greeted_names)
# Recall, that map returns an iterator 

# We can print all names in a for loop
for name in greeted_names:
    print(name)

(base) E:\python>python latihan.py
['Hi Shivani', 'Hi Jason', 'Hi Yusef', 'Hi Sakura']
Hi Shivani
Hi Jason
Hi Yusef
Hi Sakura
penjelasan : print (name) memanggil atribut yang didalamnya terdapat parameter
['Shivani', 'Jason', 'Yusef', 'Sakura'] dan greeted_names = 
map(lambda x: 'Hi ' + x, names)

# Recall
numbers = [13, 4, 18, 35]
# Instead of: filter(lambda num: num % 5 == 0, numbers), we can do
div_by_5 = [num for num in numbers if num % 5 == 0]

print(div_by_5) # [35]

# We can manage the combined case as well:
# Instead of: 
# map(lambda num: num ** 3, filter(lambda num: num % 3 == 0, range(1, 21)))
arbitrary_numbers = [num ** 3 for num in range(1, 21) if num % 3 == 0]
print(arbitrary_numbers) # [27, 216, 729, 1728, 3375, 5832]

(base) E:\python>python latihan.py
[35]
[27, 216, 729, 1728, 3375, 5832]

penjelasan : print memanggil atribut parameter arbitrary_numbers = [num ** 3 for num in range(1, 21) if num % 3 == 0]
print(arbitrary_numbers) # [27, 216, 729, 1728, 3375, 5832]
